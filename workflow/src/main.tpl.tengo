wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
abundanceColsConv := import(":abundance-cols-conv")




wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.datasetRef)

	bundleBuilder.addSingle({
		axes: [ { anchor: "main", idx: 0 }, { anchor: "main", idx: 1 }],
		annotations: {
				"pl7.app/isAbundance": "true",
				"pl7.app/abundance/normalized": "false",
				"pl7.app/abundance/isPrimary": "true"
			}
		},
		"abundance")


	return {
		columns: bundleBuilder.build()
    }
})

wf.body(func(args) {
    infile := "input.tsv"
    outfile := "rarefaction-output.tsv"
    out := ""
    cacheMins := 15

	datasetSpec := args.columns.getSpec(args.datasetRef)
    tsvBuilder := pframes.tsvFileBuilder()
    tsvBuilder.add(args.columns.getColumn("abundance"), {header: "abundance"})
    tsvBuilder.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
    tsv := tsvBuilder.build()

	rarefactionCmd := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.rereblock.software:main")).
		arg(infile).             // INPUT_TSV_FILEPATH
        addFile(infile, tsv).    // INPUT_TSV_FILEPATH
		arg(outfile).            // OUTPUT_TSV_FILEPATH
        saveFile(outfile).
        cacheMinutes(cacheMins).
		run()

    // todo: add format
    rarefactionPframe := xsv.importFile(rarefactionCmd.getFile(outfile), "tsv", abundanceColsConv.getColumns(datasetSpec))

	return {
		outputs: {
			debugStdout: out,
			rarefactionPframe: pframes.exportFrame(rarefactionPframe)
		},

		exports: {}
	}
})