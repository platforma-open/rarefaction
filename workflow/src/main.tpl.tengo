wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.datasetRef)

	bundleBuilder.addSingle({
		axes: [ { anchor: "main", idx: 0 }, { anchor: "main", idx: 1 }],
		annotations: {
				"pl7.app/isAbundance": "true",
				"pl7.app/abundance/normalized": "false",
				"pl7.app/abundance/isPrimary": "true"
			}
		},
		"abundance")


	return {
		columns: bundleBuilder.build()
    }
})

wf.body(func(args) {

	datasetSpec := args.columns.getSpec(args.datasetRef)
    tsvBuilder := pframes.tsvFileBuilder()
    tsvBuilder.add(args.columns.getColumn("abundance"), {header: "abundance"})
    tsvBuilder.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
    tsv := tsvBuilder.build()

	python := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.rereblock.software:main")).
        addFile("input.tsv", tsv).
		arg("input.tsv").
		saveStdoutContent().
		run()
	out := python.getStdoutFileContent()

	clones := [
        ["a", 0, 1, 2, 3, 4, args.num],
        ["b", 0, 1, 2, 3, 4,5],
        ["c", 0, 1, 2, 3, 4,5]
	]

	return {
		outputs: {
			debugStdout: out,
			result: clones

		},

		exports: {}
	}
})