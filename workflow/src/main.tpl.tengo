wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
maps := import("@platforma-sdk/workflow-tengo:maps")

rarefactionSw := assets.importSoftware("@platforma-open/milaboratories.rarefaction.software:main")

getSpec := func(abundanceSpec, args) {
	return {
		axes: [
			{
				column: "pl7_app_sampleId",
				spec: abundanceSpec.axesSpec[0]
			},
			{
				column: "subsampling_depth",
				spec: {
					name: "pl7.app/vdj/rarefaction/depth",
					type: "Int",
					domain: maps.merge(
						abundanceSpec.domain,
						{
							"pl7.app/vdj/rarefaction/numPoints": args.numPoints,
							"pl7.app/vdj/rarefaction/numIterations": args.numIterations
						}
					),
					annotations: {
						"pl7.app/label": "Rarefaction depth"
					}
				}
			}
		],
		columns: [
			{
				column: "mean_unique_clonotypes",
				spec: {
					name: "pl7.app/vdj/rarefaction/meanUniqueClonotypes",
					valueType: "Double",
					domain: maps.merge(
						abundanceSpec.domain,
						{
							"pl7.app/vdj/rarefaction/numPoints": args.numPoints,
							"pl7.app/vdj/rarefaction/numIterations": args.numIterations
						}
					),
					annotations: {
						"pl7.app/label": "Mean unique clonotypes",
						"pl7.app/format": ".2f"
					}
				}
			}
		]
	}
}

wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains() // to make query work for both bulk and single cell data
	bundleBuilder.addAnchor("main", args.datasetRef)

	bundleBuilder.addSingle({
		axes: [ { anchor: "main", idx: 0 }, { anchor: "main", idx: 1 }],
		annotations: {
				"pl7.app/isAbundance": "true",
				"pl7.app/abundance/normalized": "false",
				"pl7.app/abundance/isPrimary": "true"
			}
		},
		"abundance")


	return {
		columns: bundleBuilder.build()
    }
})

wf.body(func(args) {
    infile := "rarefaction-input.tsv"
    outfile := "rarefaction-output.tsv"

	datasetSpec := args.columns.getSpec(args.datasetRef)
    tsvBuilder := pframes.tsvFileBuilder()
    tsvBuilder.add(args.columns.getColumn("abundance"), {header: "abundance"})
    tsvBuilder.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")
    tsv := tsvBuilder.build()

	rarefactionCmd := exec.builder().
		software(rarefactionSw).
		arg(infile).
        addFile(infile, tsv).
		arg(outfile).
        arg(args.numPoints).
        arg(args.numIterations).
        saveFile(outfile).
		dontSaveStdoutOrStderr().
        cacheMinutes(24*60).
        printErrStreamToStdout().
		run()

    rarefactionPFrame := xsv.importFile(rarefactionCmd.getFile(outfile), "tsv", getSpec(datasetSpec, args), {
		splitDataAndSpec: true
	})
    
    trace := pSpec.makeTrace(
        datasetSpec,
        {
            type: "milaboratories.rarefaction",
            id: wf.blockId().getDataAsJson(),
            importance: 50,
            label: "Rarefaction"
        }
    )

    tracedPFrame := pframes.pFrameBuilder()
    for colId, col in rarefactionPFrame {
        tracedPFrame.add(colId, trace.inject(col.spec), col.data)
    }
	tracedPFrame = tracedPFrame.build()

	return {
		outputs: {
			rarefactionPFrame: pframes.exportFrame(tracedPFrame)
		},
		exports: {
			rarefactionPFrame: tracedPFrame
		}
	}
})